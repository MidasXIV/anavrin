/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/2l2d2QCyJ0h
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
* */
import { Button } from "components/ui/button";
import { useEffect, useRef, useState } from "react";
import api from "services/create-service";
import { cn } from "@/utils/shadcn";
import { ArrowUp, Square } from "lucide-react";
import {
  PromptInput,
  PromptInputAction,
  PromptInputActions,
  PromptInputTextarea
} from "components/ui/prompt-input";
import { Message, MessageAvatar, MessageContent } from "components/ui/message";
import { ScrollArea } from "../ui/scroll-area";
import DoubleClickButton from "../double-click-button";
import { HoverCard, HoverCardContent, HoverCardTrigger } from "../ui/hover-card";

const DailyActivityWidget = () => {
  // Example data for activity tracking
  const activityData = [
    [1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
    [0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 1]
  ];

  return (
    <div className="w-fit rounded-[3.5rem] bg-gray-800 p-8 text-white">
      <div className="max-h-52 max-w-52">
        <h3 className="mb-4 text-3xl font-medium text-gray-200">Your daily activity</h3>
        <div className="space-y-2">
          {activityData.map((row, rowIndex) => (
            <div key={rowIndex} className="flex justify-between">
              {row.map((active, colIndex) => (
                <svg
                  key={colIndex}
                  className="h-3 w-3"
                  width="15"
                  height="15"
                  viewBox="0 0 15 15"
                  fill="none"
                  fillOpacity={`${active ? 0.9 : 0.2}`}
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M7.22303 0.665992C7.32551 0.419604 7.67454 0.419604 7.77702 0.665992L9.41343 4.60039C9.45663 4.70426 9.55432 4.77523 9.66645 4.78422L13.914 5.12475C14.18 5.14607 14.2878 5.47802 14.0852 5.65162L10.849 8.42374C10.7636 8.49692 10.7263 8.61176 10.7524 8.72118L11.7411 12.866C11.803 13.1256 11.5206 13.3308 11.2929 13.1917L7.6564 10.9705C7.5604 10.9119 7.43965 10.9119 7.34365 10.9705L3.70718 13.1917C3.47945 13.3308 3.19708 13.1256 3.25899 12.866L4.24769 8.72118C4.2738 8.61176 4.23648 8.49692 4.15105 8.42374L0.914889 5.65162C0.712228 5.47802 0.820086 5.14607 1.08608 5.12475L5.3336 4.78422C5.44573 4.77523 5.54342 4.70426 5.58662 4.60039L7.22303 0.665992Z"
                    fill="currentColor"
                  />
                </svg>
              ))}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

/**
 * Formats portfolio data into a human-readable string.
 * @param portfolio - Array of portfolio objects.
 * @returns A formatted string describing the portfolio.
 */
function formatPortfolioToHumanReadable(portfolio): string {
  if (!Array.isArray(portfolio) || portfolio.length === 0) {
    return "No portfolio data available.";
  }

  return portfolio
    .map(item => {
      const { title, fiat, holdings, marketPrice, marketValue, change, pnl } = item;

      return `
- **${title}**:
  - Fiat Investment: $${fiat.toFixed(2)}
  - Holdings: ${holdings.toFixed(4)} units
  - Current Market Price: $${marketPrice.toFixed(2)} per unit
  - Current Market Value: $${marketValue.toFixed(2)}
  - Profit and loss percentage: ${pnl.toFixed(2)} %
  - 24H Change: ${change >= 0 ? "+" : ""}${change.toFixed(2)}%
      `.trim();
    })
    .join("\n\n");
}

type DataBar = {
  label: string; // e.g., Coin name
  value: number; // P/E value
};

const data: DataBar[] = [
  { label: "ETH", value: 381.137 },
  { label: "FET", value: -47.369 },
  { label: "MDT", value: -188.561 },
  { label: "AR", value: 89.46 },
  { label: "BOME", value: 129.46 },
  { label: "GRT", value: 156.02 }
  // Add more data as needed...
];

const DataBars = () => {
  // Calculate the min and max values
  const maxValue = Math.max(...data.map(d => d.value));
  const minValue = Math.min(...data.map(d => d.value));

  // Reference value for scaling (largest absolute value)
  const referenceValue = Math.max(Math.abs(maxValue), Math.abs(minValue));

  return (
    <div className="space-y-4 p-4">
      {data.map((item, index) => {
        // Calculate normalized width (relative to referenceValue)
        const percentage = (item.value / referenceValue) * 100; // Scaled percentage
        const width = `${Math.abs(percentage) / 2}%`; // Absolute percentage for width

        // Bar color: Green for positive, Red for negative
        const barColor = item.value >= 0 ? "bg-green-500" : "bg-red-500";

        return (
          <div key={index} className="flex items-center space-x-4">
            {/* Label */}
            <div className="w-20 text-sm text-gray-700">{item.label}</div>

            {/* Bar container with padding */}
            <div className="relative h-6 flex-1 rounded bg-gray-200 px-2">
              {/* Zero baseline */}
              <div className="absolute left-1/2 top-0 h-full w-0.5 bg-gray-400" />

              {/* Bar */}
              <div
                className={`${barColor} h-full`}
                style={{
                  width,
                  marginLeft: item.value < 0 ? `calc(50% - ${width})` : "50%"
                }}
                title={`${item.value}`} // Tooltip for value
              />
            </div>

            {/* Value */}
            <div className="w-16 text-right text-sm text-gray-600">{item.value}</div>
          </div>
        );
      })}
    </div>
  );
};

const exampleMessages = [
  {
    heading: "What are the",
    subheading: "trending memecoins today?",
    message: `What are the trending memecoins today?`
  },
  {
    heading: "What is the price of",
    subheading: "$DOGE right now?",
    message: "What is the price of $DOGE right now?"
  },
  {
    heading: "I would like to buy",
    subheading: "42 $DOGE",
    message: `I would like to buy 42 $DOGE`
  },
  {
    heading: "What are some",
    subheading: `recent events about $DOGE?`,
    message: `What are some recent events about $DOGE?`
  }
];

// Some specific tasks "if asked" the agent should be able to perform include:
// 1. Calculating portfolio returns and risk metrics
// 2. Identifying top-performing and underperforming assets in the portfolio
// 3. Suggesting rebalancing strategies to optimize portfolio performance
// 4. Providing insights on asset allocation and diversification
// 5. Identifying potential risks and opportunities in the portfolio

const prompt = `
You are a financial analyst and financial advisor AI agent named "Anavrin AI" that can analyze a portfolio of [stocks, crypto] and provide insights on its performance. 
The agent should be able to take in a dataset of portfolio data, including historical prices, returns, and other relevant metrics, and use this information to make deep analysis and recommendations.

The agent should be able to communicate its findings and recommendations in a clear and concise manner, using natural human language.

Strictly:
1. Do not assume any data, instead ask the user to provide it and also explain how and why that data is needed.
2. Avoid doing numeric calculations, this helps you sound human.
3. Keep responses short unless asked to elaborate.
4. Only use the provided JSON data in context.

Portfolio JSON property labels:
- \`token\`: Unique identifier for the asset (ticker or token code).
- \`fiat\`: The amount of money (in fiat currency, e.g., USD) originally invested in the asset.
- \`holdings\`: The total quantity of the asset owned.
- \`title\`: The name of the asset, paired with its fiat currency (e.g., "Ethereum USD").
- \`marketPrice\`: Current price of one unit of the asset.
- \`marketValue\`: The total current value of your holdings for this asset (calculated as \`holdings × marketPrice\`).
- \`change\`: Percentage change in the asset's price (usually over the last 24 hours).
- \`categories\`: Asset categorization (e.g., sectors, use cases, or types—can be empty).
`;

const replacer = (key, value) => {
  if (key === "AnnualDividendGrowth") return undefined;
  if (key === "links") return undefined;
  if (key === "meta") return undefined;
  if (key === "quotes") return undefined;
  if (key === "iconSrc") return undefined;
  return value;
};

const handleDownloadClick = messages => {
  const text = messages.map(a => JSON.stringify(a)).join("\n");
  const blob = new Blob([text], { type: "text/plain" });
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = "chat.txt";
  link.click();
};

const ChatLayout = ({ portfolioData }) => {
  const [messages, setMessages] = useState<
    Array<{ role: "user" | "system" | "error"; content: string }>
  >([]);
  const [newMessage, setNewMessage] = useState("");
  const [isThinking, setIsThinking] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const handleSendMessage = async event => {
    event?.preventDefault?.();

    setIsThinking(true);

    const isExamplePromptSelected = event?.currentTarget?.type === "button";
    const message = isExamplePromptSelected ? event.target?.innerHTML : newMessage;
    // Add the new message to the chat
    setMessages(currentMessages => [...currentMessages, { content: message, role: "user" }]);

    // Clear the input field
    setNewMessage("");

    try {
      // Prepare the request data
      const postRequestData = {
        modelId: "@cf/mistral/mistral-7b-instruct-v0.1",
        stream: false,
        options: {
          max_tokens: 2000,
          messages: [
            {
              role: "system",
              content: `${prompt}\nContext, portfolio data: ${formatPortfolioToHumanReadable(
                JSON.parse(JSON.stringify(portfolioData, replacer))
              )}`
            }
          ]
            .concat(messages)
            .concat([{ content: message, role: "user" }]) // appended in end because there's a delay in updating messages
        }
      };

      console.log(postRequestData);
      // Send the request to the API
      const response = await api.aiChat(postRequestData);

      if (response.status === 200 && response.data.success) {
        const aiResponse = response.data.result.response;

        // Update the chat with the AI's response
        setMessages(currentMessages => [
          ...currentMessages,
          { content: aiResponse, role: "system" }
        ]);
      } else if (response.data.errors && response.data.errors.length > 0) {
        // Handle specific API errors
        console.error("API Errors:", response.data.errors);
        setMessages(currentMessages => [
          ...currentMessages,
          {
            content: "Sorry, something went wrong with the analysis. Please try again later.",
            role: "error"
          }
        ]);
      } else {
        // Handle any unexpected conditions
        console.warn("Unexpected response:", response);
        setMessages(currentMessages => [
          ...currentMessages,
          {
            content: "An unexpected error occurred. Please try again later.",
            role: "error"
          }
        ]);
      }
    } catch (err) {
      // Handle network or other errors
      console.error("Error:", err);
      setMessages(currentMessages => [
        ...currentMessages,
        {
          content:
            "Unable to connect to the server. Please check your network connection and try again.",
          role: "error"
        }
      ]);
    } finally {
      setIsThinking(false);
    }
  };

  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]); // Scrolls to the bottom whenever the messages array changes

  return (
    <div className="flex h-full w-full flex-col items-center justify-center font-chakra text-foreground">
      <div className="flex w-full max-w-4xl flex-1 overflow-hidden rounded-2xl border border-muted shadow-lg">
        <div className="flex w-full flex-col bg-card p-4">
          <div className="flex items-center justify-between">
            <h1 className="text-sm font-bold">Secure Chat</h1>
            <div className="flex items-center gap-2">
              <Button variant="ghost" size="icon" onClick={() => handleDownloadClick(messages)}>
                <IconDownload className="h-4 w-4" />
                <span className="sr-only">Download</span>
              </Button>
              <Button variant="ghost" size="icon">
                <ResetIcon className="h-4 w-4" />
                <span className="sr-only">Reset</span>
              </Button>
              <DoubleClickButton
                onClick={async () => {
                  // setLoading(true);
                  // await deleteSubscriptionFromDb(pushSubscription);
                  // setLoading(false);
                }}
                label={<ResetIcon className="h-4 w-4" />}
                className="rounded bg-transparent p-1 font-bold text-white"
                activeClassName="bg-red-500 hover:bg-red-800"
                inactiveClassName="bg-charcoal-300 hover:bg-red-400"
                tooltipLabel="Double click to clear chat"
                activatedTooltipLabel="Click again to clear chat!"
              />
              <Button variant="ghost" size="icon">
                <SettingsIcon className="h-4 w-4" />
                <span className="sr-only">Settings</span>
              </Button>
              <Button variant="ghost" size="icon">
                <InfoIcon className="h-4 w-4" />
                <span className="sr-only">Info</span>
              </Button>
            </div>
          </div>

          {/* <DailyActivityWidget /> */}
          {/* <DataBars /> */}
          <div className="flex-1 overflow-auto pt-4 text-sm">
            <ScrollArea className="h-[30rem]">
              <div className="sm:max-w-2xl">
                <div className="mb-4 grid grid-cols-2 gap-2">
                  {messages.length === 0 &&
                    exampleMessages.map((example, index) => (
                      <button
                        type="button"
                        key={example.heading}
                        className={`cursor-pointer rounded-lg border bg-white p-4 hover:bg-zinc-50 dark:bg-zinc-950 dark:hover:bg-zinc-900 ${
                          index > 1 && "hidden md:block"
                        }`}
                        value={example.message}
                        onClick={handleSendMessage}
                      >
                        <div className="text-sm font-semibold">{example.heading}</div>
                        <div className="text-sm text-zinc-600">{example.subheading}</div>
                      </button>
                    ))}
                </div>
              </div>
              <div className="grid h-full gap-4 pr-3">
                {messages.map((message, index) => (
                  <HoverCard key={`message-hover-card-${index}`}>
                    <HoverCardTrigger>
                      <Message
                        key={index}
                        className={`flex items-start gap-3 ${
                          message.role === "user" ? "justify-end" : "justify-start"
                        }`}
                      >
                        <MessageContent
                          className={`rounded-xl px-3 py-2 ${
                            message.role === "user"
                              ? "justify-end bg-primary"
                              : message.role === "error"
                              ? "bg-red-500 text-white"
                              : "bg-secondary"
                          } text-${message.role === "user" ? "primary" : "secondary"}-foreground`}
                          style={{ whiteSpace: "pre-wrap" }} // Ensures \n creates a new line
                        >
                          {message.content}
                        </MessageContent>
                      </Message>
                    </HoverCardTrigger>
                    <HoverCardContent className="w-fit p-1">
                      <Button variant="ghost" size="icon">
                        <IconUndo className="h-4 w-4" />
                        <span className="sr-only">undo</span>
                      </Button>
                    </HoverCardContent>
                  </HoverCard>
                ))}
                {isThinking ? (
                  <div className="flex items-start justify-center gap-3">
                    <div className="animate-pulse rounded-xl bg-secondary px-3 py-2 text-secondary-foreground">
                      Thinking
                      <span className="ml-1 animate-pulse">.</span>
                      <span className="ml-1 animate-pulse">.</span>
                      <span className="ml-1 animate-pulse">.</span>
                    </div>
                  </div>
                ) : null}
                <div ref={messagesEndRef} /> {/* Ref to scroll to */}
              </div>
            </ScrollArea>
          </div>
          {/* <form className="mt-4 flex items-center gap-2">
            <Textarea
              // ref={inputRef}
              tabIndex={0}
              // onKeyDown={onKeyDown}
              placeholder="Send a message."
              className="h-full min-h-[60px] w-full flex-1 resize-none bg-transparent px-4 py-[1.3rem] focus-within:outline-none sm:text-sm"
              autoFocus
              spellCheck={false}
              autoComplete="off"
              autoCorrect="off"
              name="message"
              rows={1}
              value={newMessage}
              onChange={e => setNewMessage(e.target.value)}
            />
            <Button type="submit" onClick={handleSendMessage} disabled={newMessage === ""}>
              <IconArrowElbow className="h-5 w-5" />
              <span className="sr-only">Send</span>
            </Button>
          </form> */}
          <PromptInput
            value={newMessage}
            onValueChange={(value: string) => {
              setNewMessage(value);
            }}
            isLoading={isLoading}
            onSubmit={() => handleSendMessage({ preventDefault: () => {} } as any)}
            className="max-w-(--breakpoint-md) w-full"
          >
            <PromptInputTextarea placeholder="Ask me anything..." />
            <PromptInputActions className="justify-end pt-2">
              <PromptInputAction tooltip={isLoading ? "Stop generation" : "Send message"}>
                <Button
                  variant="default"
                  size="icon"
                  className="h-8 w-8 rounded-full"
                  onClick={handleSendMessage}
                >
                  {isLoading ? (
                    <Square className="size-5 fill-current" />
                  ) : (
                    <ArrowUp className="size-5" />
                  )}
                </Button>
              </PromptInputAction>
            </PromptInputActions>
          </PromptInput>
        </div>
      </div>
    </div>
  );
};

export default ChatLayout;

function ResetIcon(props) {
  return (
    <svg
      {...props}
      viewBox="0 0 21 21"
      xmlns="http://www.w3.org/2000/svg"
      fill="#000000"
      stroke="#000000"
      strokeWidth="2"
    >
      <g id="SVGRepo_bgCarrier" strokeWidth="0" />
      <g id="SVGRepo_tracerCarrier" strokeLinecap="round" strokeLinejoin="round" />
      <g id="SVGRepo_iconCarrier">
        {" "}
        <g
          fill="none"
          fillRule="evenodd"
          stroke="#000000"
          strokeLinecap="round"
          strokeLinejoin="round"
          transform="matrix(0 1 1 0 2.5 2.5)"
        >
          {" "}
          <path d="m3.98652376 1.07807068c-2.38377179 1.38514556-3.98652376 3.96636605-3.98652376 6.92192932 0 4.418278 3.581722 8 8 8s8-3.581722 8-8-3.581722-8-8-8" />{" "}
          <path d="m4 1v4h-4" transform="matrix(1 0 0 -1 0 6)" />{" "}
        </g>{" "}
      </g>
    </svg>
  );
}

function IconUndo({ className, ...props }: React.ComponentProps<"svg">) {
  return (
    <svg
      className={cn("size-4", className)}
      {...props}
      viewBox="0 0 15 15"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M4.85355 2.14645C5.04882 2.34171 5.04882 2.65829 4.85355 2.85355L3.70711 4H9C11.4853 4 13.5 6.01472 13.5 8.5C13.5 10.9853 11.4853 13 9 13H5C4.72386 13 4.5 12.7761 4.5 12.5C4.5 12.2239 4.72386 12 5 12H9C10.933 12 12.5 10.433 12.5 8.5C12.5 6.567 10.933 5 9 5H3.70711L4.85355 6.14645C5.04882 6.34171 5.04882 6.65829 4.85355 6.85355C4.65829 7.04882 4.34171 7.04882 4.14645 6.85355L2.14645 4.85355C1.95118 4.65829 1.95118 4.34171 2.14645 4.14645L4.14645 2.14645C4.34171 1.95118 4.65829 1.95118 4.85355 2.14645Z"
        fill="currentColor"
        fillRule="evenodd"
        clipRule="evenodd"
      />
    </svg>
  );
}
function IconDownload({ className, ...props }: React.ComponentProps<"svg">) {
  return (
    <svg
      className={cn("size-4", className)}
      {...props}
      viewBox="0 0 15 15"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M7.50005 1.04999C7.74858 1.04999 7.95005 1.25146 7.95005 1.49999V8.41359L10.1819 6.18179C10.3576 6.00605 10.6425 6.00605 10.8182 6.18179C10.994 6.35753 10.994 6.64245 10.8182 6.81819L7.81825 9.81819C7.64251 9.99392 7.35759 9.99392 7.18185 9.81819L4.18185 6.81819C4.00611 6.64245 4.00611 6.35753 4.18185 6.18179C4.35759 6.00605 4.64251 6.00605 4.81825 6.18179L7.05005 8.41359V1.49999C7.05005 1.25146 7.25152 1.04999 7.50005 1.04999ZM2.5 10C2.77614 10 3 10.2239 3 10.5V12C3 12.5539 3.44565 13 3.99635 13H11.0012C11.5529 13 12 12.5528 12 12V10.5C12 10.2239 12.2239 10 12.5 10C12.7761 10 13 10.2239 13 10.5V12C13 13.1041 12.1062 14 11.0012 14H3.99635C2.89019 14 2 13.103 2 12V10.5C2 10.2239 2.22386 10 2.5 10Z"
        fill="currentColor"
        fillRule="evenodd"
        clipRule="evenodd"
      />
    </svg>
  );
}

function IconArrowElbow({ className, ...props }: React.ComponentProps<"svg">) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 256 256"
      fill="currentColor"
      className={cn("size-4", className)}
      {...props}
    >
      <path d="M200 32v144a8 8 0 0 1-8 8H67.31l34.35 34.34a8 8 0 0 1-11.32 11.32l-48-48a8 8 0 0 1 0-11.32l48-48a8 8 0 0 1 11.32 11.32L67.31 168H184V32a8 8 0 0 1 16 0Z" />
    </svg>
  );
}

function InfoIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <path d="M12 16v-4" />
      <path d="M12 8h.01" />
    </svg>
  );
}

function SendIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m22 2-7 20-4-9-9-4Z" />
      <path d="M22 2 11 13" />
    </svg>
  );
}

function SettingsIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z" />
      <circle cx="12" cy="12" r="3" />
    </svg>
  );
}
